<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>图片素材</title>
    <link href="/2023/%E5%9B%BE%E7%89%87%E7%B4%A0%E6%9D%90/"/>
    <url>/2023/%E5%9B%BE%E7%89%87%E7%B4%A0%E6%9D%90/</url>
    
    <content type="html"><![CDATA[<p>最新发现一些图片网址，简单整理了一。都是可以免费下载的奥，赶紧记录下来吧。以后桌面不怕没好看的图片了。</p><h3 id="pixabay"><a href="#pixabay" class="headerlink" title="pixabay"></a><a href="https://pixabay.com/">pixabay</a></h3><p>供高清图片、高清文艺类图片、高清视频。<strong>我比较喜欢用这个</strong></p><h2 id="pexels、unsplash"><a href="#pexels、unsplash" class="headerlink" title="pexels、unsplash"></a><a href="https://www.pexels.com/zh-cn/">pexels</a>、<a href="https://unsplash.com/">unsplash</a></h2><p>人物图、风景图、城市风光、乡村图片</p><h3 id="stocksnap、streetwill"><a href="#stocksnap、streetwill" class="headerlink" title="stocksnap、streetwill"></a><a href="https://stocksnap.io/">stocksnap</a>、<a href="http://streetwill.co/">streetwill</a></h3><p>高清摄影类图片</p><h3 id="gratisography"><a href="#gratisography" class="headerlink" title="gratisography"></a><a href="https://gratisography.com/">gratisography</a></h3><p>创意图片，有的是经过ps处理后的成品。</p><h3 id="textures"><a href="#textures" class="headerlink" title="textures"></a><a href="https://www.textures.com/">textures</a></h3><p>高清材质类图片、物体（动物、生物、植物、建筑等等）表面图片、纹理图像、三维立体图像（几何、实物等类型）。</p>]]></content>
    
    
    <categories>
      
      <category>图册</category>
      
    </categories>
    
    
    <tags>
      
      <tag>免费图片素材</tag>
      
      <tag>高清</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>argmax经过sigmoid和不经过sigmoid区别</title>
    <link href="/2023/argmax%E7%BB%8F%E8%BF%87sigmoid%E5%92%8C%E4%B8%8D%E7%BB%8F%E8%BF%87sigmoid%E5%8C%BA%E5%88%AB/"/>
    <url>/2023/argmax%E7%BB%8F%E8%BF%87sigmoid%E5%92%8C%E4%B8%8D%E7%BB%8F%E8%BF%87sigmoid%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>今天和同组讨论了一下网络输出时，在torch.argmax之前经过torch.sigmoid和不经过sigmoid的区别。<br>主要起因是实验结果图像不同</p><!-- * **不经过sigmoid**  --><div align=center><img src="/2023/argmax%E7%BB%8F%E8%BF%87sigmoid%E5%92%8C%E4%B8%8D%E7%BB%8F%E8%BF%87sigmoid%E5%8C%BA%E5%88%AB/%E4%B8%8D%E7%BB%8F%E8%BF%87sigmoid.png" class="" title="不经过sigmoid"><p><font>图1 不经过sigmoid</font></p><img src="/2023/argmax%E7%BB%8F%E8%BF%87sigmoid%E5%92%8C%E4%B8%8D%E7%BB%8F%E8%BF%87sigmoid%E5%8C%BA%E5%88%AB/%E7%BB%8F%E8%BF%87sigmoid.png" class="" title="不经过sigmoid"><p><font>图2 经过sigmoid</font></p></div><p>我们发现经过sigmoid预测的图像更加严格（实验结果证明，经过sigmoid效果好），会将一些<code>不经过sigmoid</code>预测的前景分为背景。</p><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#coding:utf-8</span><br><span class="hljs-keyword">import</span> torch<br>a = torch.tensor([<br>    [[<span class="hljs-number">8.0</span>,<span class="hljs-number">5.0</span>,-<span class="hljs-number">20000.0</span>],[<span class="hljs-number">4.0</span>,<span class="hljs-number">1.0</span>,<span class="hljs-number">2.0</span>],[<span class="hljs-number">1.0</span>,<span class="hljs-number">6.0</span>,<span class="hljs-number">7.0</span>]],<br>    [[-<span class="hljs-number">6.0</span>,<span class="hljs-number">11.0</span>,-<span class="hljs-number">20000.0</span>],[<span class="hljs-number">5.0</span>,<span class="hljs-number">7.0</span>,<span class="hljs-number">9.0</span>],[<span class="hljs-number">8.0</span>,<span class="hljs-number">9.0</span>,<span class="hljs-number">10.0</span>]],<br>    [[-<span class="hljs-number">6.0</span>,<span class="hljs-number">10.0</span>,-<span class="hljs-number">20001.0</span>],[<span class="hljs-number">5.0</span>,<span class="hljs-number">7.0</span>,<span class="hljs-number">9.0</span>],[<span class="hljs-number">8.0</span>,<span class="hljs-number">9.0</span>,<span class="hljs-number">10.0</span>]]<br>])<br>b = torch.argmax(a,dim=<span class="hljs-number">0</span>)<br>d = torch.sigmoid(a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;as:\n&quot;</span>,d)<br>ds = torch.argmax(d,dim=<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没经过sig:\n&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(b))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;经过sig:\n&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(ds))<br></code></pre></td></tr></table></figure><ul><li>结果<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs lua">as:<br> tensor(<span class="hljs-string">[[[0.9997, 0.9933, 0.0000],</span><br><span class="hljs-string">         [0.9820, 0.7311, 0.8808],</span><br><span class="hljs-string">         [0.7311, 0.9975, 0.9991]]</span>,<br><br>        <span class="hljs-string">[[0.0025, 1.0000, 0.0000],</span><br><span class="hljs-string">         [0.9933, 0.9991, 0.9999],</span><br><span class="hljs-string">         [0.9997, 0.9999, 1.0000]]</span>,<br><br>        <span class="hljs-string">[[0.0025, 1.0000, 0.0000],</span><br><span class="hljs-string">         [0.9933, 0.9991, 0.9999],</span><br><span class="hljs-string">         [0.9997, 0.9999, 1.0000]]</span>])<br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lua">没经过sig:<br>tensor(<span class="hljs-string">[[0, 1, 1],</span><br><span class="hljs-string">        [2, 2, 2],</span><br><span class="hljs-string">        [2, 2, 2]]</span>)<br>经过sig:<br>tensor(<span class="hljs-string">[[0, 1, 2],</span><br><span class="hljs-string">        [2, 2, 2],</span><br><span class="hljs-string">        [2, 2, 2]]</span>)<br></code></pre></td></tr></table></figure></li><li>我们可以发现其中-20000.0，-20000.0，-20001.0分别出现在第1,2,3通道上。但是由于经过sigmoid,我们看到<strong>as</strong>结果都为0，所以导致我们最终argmax最大索引到2通道。但是如果我们不经过sigmoid，发现argmax最大索引是1。这也就证实了上面两张预测图为什么会不一样。</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>argmax</tag>
      
      <tag>sigmoid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo图片管理</title>
    <link href="/2023/hexo%E5%9B%BE%E7%89%87%E7%AE%A1%E7%90%86/"/>
    <url>/2023/hexo%E5%9B%BE%E7%89%87%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="选择使用hexo-asset-img进行Hexo博客图片管理。因为这个可以在你创建文章的目录下自动新建一个存储当前文章所用到的图片文件夹，感觉比较方便，也便于后续备份。"><a href="#选择使用hexo-asset-img进行Hexo博客图片管理。因为这个可以在你创建文章的目录下自动新建一个存储当前文章所用到的图片文件夹，感觉比较方便，也便于后续备份。" class="headerlink" title="选择使用hexo-asset-img进行Hexo博客图片管理。因为这个可以在你创建文章的目录下自动新建一个存储当前文章所用到的图片文件夹，感觉比较方便，也便于后续备份。"></a>选择使用hexo-asset-img进行Hexo博客图片管理。因为这个可以在你创建文章的目录下自动新建一个存储当前文章所用到的图片文件夹，感觉比较方便，也便于后续备份。</h3><hr><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code class="hljs">npm install hexo-asset-img --save</code></pre><h2 id="config-yml配置"><a href="#config-yml配置" class="headerlink" title="_config.yml配置"></a>_config.yml配置</h2><p>如果你之前已经安装了hexo，那么默认_config.yml文件中有<code>post_asset_folder</code>这个选项，将其值设置为<strong>true</strong></p><h2 id="创建一个-md文章试试"><a href="#创建一个-md文章试试" class="headerlink" title="创建一个.md文章试试"></a>创建一个.md文章试试</h2><pre><code class="hljs">hexo new &quot;hexo图片管理&quot;</code></pre><p>那么目录结构应该是这样的<br>    <img src="/2023/hexo%E5%9B%BE%E7%89%87%E7%AE%A1%E7%90%86/mulujigou.png" class="" title="目录"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo-asset-img图片管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Git LFS上传大文件步骤</title>
    <link href="/2023/%E4%BD%BF%E7%94%A8Git-LFS%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%96%87%E4%BB%B6%E6%AD%A5%E9%AA%A4/"/>
    <url>/2023/%E4%BD%BF%E7%94%A8Git-LFS%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%96%87%E4%BB%B6%E6%AD%A5%E9%AA%A4/</url>
    
    <content type="html"><![CDATA[<p>1.首先我们要先下载git lfs。<a href="https://git-lfs.github.com/">链接地址</a><br>2.我们需要安装git lfs，但是必须安装到git&#x2F;bin下面。就是你安装git的时候，那个路径。可以看我的git安装路径：</p><img src="/2023/%E4%BD%BF%E7%94%A8Git-LFS%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%96%87%E4%BB%B6%E6%AD%A5%E9%AA%A4/1.png" class="" title="image"><p>3.我们可以使用以下步骤进行大文件上传，因为github上传有大文件有100M的限制。但是在上传的过程中，可能会出现443：timeout，或者refused等错误，可以看我<a href="https://www.cnblogs.com/peixu/p/17231781.html">博客园里的一篇文章</a>，里面写了解决方案。<br>首先进入到你的项目下，可以直接cmd。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">git init <span class="hljs-comment">#创建本地仓库环境</span><br><br>git lfs install <span class="hljs-comment"># 安装大文件上传应用&lt;br /&gt;#如果你之前已经向远端git过文件，并且已经安装使用过lfs。那么上述两个语句可以不用写</span><br><br>git lfs track * <span class="hljs-comment">#追踪要上传的大文件，*表示路劲下的所有文件。我们如果只上传nii文件，可以使用*.nii</span><br><br>git add .gitattributes <span class="hljs-comment">#添加上传的属性文件（要先上传属性文件，不然可能会失败）ps：我没写这句话，但是也上传成功了</span><br><br>git commit -m <span class="hljs-string">&quot;first commit&quot;</span><br><br>git remote add origin git@github.com:DreamOneYou/Liver_Tumor.git<br><br>git push origin master <span class="hljs-comment">#将本地仓库origin分支更新到远程仓库master分支下。这一步字第一次上传是很可能会报错：error：failed to push some refs to &amp;ldquo;...&amp;rdquo;。我们不用管，直接按照下面步骤继续就行</span><br><br>git add * <span class="hljs-comment">#添加要上传的大文件，*表示路劲下的所有文件</span><br>git commit -m <span class="hljs-string">&quot;first commit&quot;</span><span class="hljs-comment"># 添加大文件上传说明</span><br>git push origin master <span class="hljs-comment">#上传大文件</span><br></code></pre></td></tr></table></figure><p>　4、我们在上传大文件的过程中，可能会遇到已经执行&amp;nbsp; git lfs track *.zip&amp;nbsp; 等文件，之后使用&amp;nbsp; git add * 向本地库添加文件。但是发现使用&amp;nbsp; git lfs status&amp;nbsp; 时发现，没有跟踪到任何文件。对于这种情况。我采用了最原始的方法，就是单个大文件上传。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">git lfs track *.<span class="hljs-built_in">zip</span><br>git add models/LITS_UNet_MAT_HDC/<span class="hljs-number">2022</span>1003_121927_MAT_HDC_Centerline/model.<span class="hljs-built_in">zip</span><br>git commit -m <span class="hljs-string">&quot;upload best model&quot;</span><br>git push origin master <span class="hljs-comment">#有时候会遇到这一步执行成功了，但是远端没有更新。我们只需要在执行一次这个语句就行</span><br></code></pre></td></tr></table></figure><p>5、当需要clone远端文件和大文件时，可以按照以下步骤：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">git clone git@github.com:DreamOneYous/Hepatic_vessel.git<br>git lfs pull <span class="hljs-comment"># 拉取所有lfs上传的大文件</span><br><br>git lfs pull --include=&amp;lt;file_path&amp;gt; <span class="hljs-comment"># 可以指定拉取某个大文件</span><br></code></pre></td></tr></table></figure><p>&amp;nbsp;6、如果克隆远端仓库的同时，还要克隆远端仓库中的子模块（其他仓库文件），可以采用下面语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">git clone --recursive URL <span class="hljs-comment"># 第一种：让 Git 在克隆仓库时同时下载所有子模块的代码</span><br><br>git submodule update <span class="hljs-comment">#第二种：进入每个子模块的目录中，分别执行 git submodule update 命令来下载子模块中的代码</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何使用Waline评论</title>
    <link href="/2023/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Waline%E8%AF%84%E8%AE%BA/"/>
    <url>/2023/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Waline%E8%AF%84%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="为什么选择Waline评论"><a href="#为什么选择Waline评论" class="headerlink" title="为什么选择Waline评论"></a>为什么选择Waline评论</h2><p>刚开始选择valine，但是网上有人说valine评论不安全，比如：评论者和自己的IP和邮箱等信息容易被泄露（ps：这是我从valine换到waline的重点原因）。还有一个原因就是很容易被发送垃圾信息，因为他没有一个注册功能，只要是个人，就可以随便发评论。</p><ul><li>选择国际版的<strong>缺点</strong>：就是只能用外网评论，很尴尬啊，我面向的是国内啊。等我的域名备案了，在转向国内吧。</li></ul><h2 id="开始配置（基于Valine进行迁移）"><a href="#开始配置（基于Valine进行迁移）" class="headerlink" title="开始配置（基于Valine进行迁移）"></a>开始配置（基于Valine进行迁移）</h2><h3 id="LeanCloud配置（数据库）"><a href="#LeanCloud配置（数据库）" class="headerlink" title="LeanCloud配置（数据库）"></a>LeanCloud配置（数据库）</h3><ul><li>这个我选择的是<a href="https://console.leancloud.app/">国际版</a>，这样后面的那个<code>LEAN_SERVER</code>就可以不用配置了。ps：主要我买的域名还没有备案，只能先选择国际版了。</li><li>进入到链接里面，就可以开始注册账户。注册完了之后进如控制台,点击创建应用，选择开发版就行，毕竟就这个版本不要money。之后进入设置（setting）找到 <code>APP ID,APP Key 和 Master Key</code> ,因为后面需要用到。<img src="/2023/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Waline%E8%AF%84%E8%AE%BA/1.png" class="" title="LeanCloud"><img src="/2023/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Waline%E8%AF%84%E8%AE%BA/2.png" class="" title="LeanCloud1"></li></ul><h3 id="Vercel配置（服务端）"><a href="#Vercel配置（服务端）" class="headerlink" title="Vercel配置（服务端）"></a>Vercel配置（服务端）</h3><ul><li>点击<a href="https://vercel.com/new/clone">部署</a>,你可以选择使用GitHub快捷登录。</li><li>创建项目并点击Create继续,此时 Vercel 会基于 Waline 模板帮助你新建并初始化仓库，仓库名为你之前输入的项目名。<img src="/2023/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Waline%E8%AF%84%E8%AE%BA/3.png" class="" title="Vercel3"></li><li>一两分钟后，满屏的烟花会庆祝你部署成功。此时点击 <code>Go to Dashboard</code> 可以跳转到应用的控制台。<img src="/2023/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Waline%E8%AF%84%E8%AE%BA/4.png" class="" title="Vercel4"></li><li>点击顶部的 <code>Settings - Environment Variables </code>进入环境变量配置页，并配置三个环境变量 <code>LEAN_ID, LEAN_KEY 和 LEAN_MASTER_KEY </code>。它们的值分别对应上一步在 LeanCloud 中获得的 <code>APP ID, APP KEY, Master Key</code>。<img src="/2023/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Waline%E8%AF%84%E8%AE%BA/5.png" class="" title="Vercel5"></li><li>环境变量配置完成之后点击顶部的<code>Deployments</code>点击顶部最新的一次部署右侧的 <code>Redeploy </code>按钮进行重新部署。该步骤是为了让刚才设置的环境变量生效。<img src="/2023/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Waline%E8%AF%84%E8%AE%BA/6.png" class="" title="Vercel6"></li><li>此时会跳转到 <code>Overview </code>界面开始部署，等待片刻后 <code>STATUS </code>会变成<code> Ready</code>。此时请点击<code>Visit</code>，即可跳转到部署好的网站地址，此地址即为你的服务端地址。<img src="/2023/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Waline%E8%AF%84%E8%AE%BA/7.png" class="" title="Vercel7"></li></ul><h3 id="hexo主题（我用的是Fluid主题）中配置"><a href="#hexo主题（我用的是Fluid主题）中配置" class="headerlink" title="hexo主题（我用的是Fluid主题）中配置"></a>hexo主题（我用的是Fluid主题）中配置</h3><ul><li>进入到主题中的<code>_config.yml</code>修改 <code>serverURL</code>,这里的serverURL值必须写你Vercel生成的<code>DOMAINS</code>的<code>.app</code>那个链接。<img src="/2023/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Waline%E8%AF%84%E8%AE%BA/8.png" class="" title="hexo8"></li><li>在Fluid主题中，需要修改<code>themes\fluid\layout\_partials\plugins\waline.ejs</code>文件。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;head&gt;<br>    &lt;!-- ... --&gt;<br>    &lt;link<br>      rel=<span class="hljs-string">&quot;stylesheet&quot;</span><br>      href=<span class="hljs-string">&quot;https://unpkg.com/@waline/client@v2/dist/waline.css&quot;</span><br>    /&gt;<br>    &lt;!-- ... --&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;!-- ... --&gt;<br>    &lt;div <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;waline&quot;</span>&gt;&lt;/div&gt;<br>    &lt;script <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;<br>      <span class="hljs-keyword">import</span> &#123; init &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;https://unpkg.com/@waline/client@v2/dist/waline.mjs&#x27;</span>;<br>  <br>      init(&#123;<br>        el: <span class="hljs-string">&#x27;#waline&#x27;</span>,<br>        serverURL: <span class="hljs-string">&#x27;https://dream-one-you-github-io.vercel.app&#x27;</span>,<br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br></code></pre></td></tr></table></figure></li></ul><h3 id="评论管理"><a href="#评论管理" class="headerlink" title="评论管理"></a>评论管理</h3><ul><li>部署完成后，在<code>&lt;serverURL&gt;/ui/register</code>进行注册。第一个注册的人被设定为管理员。</li><li>管理员可管理评论。</li><li>用户可通过评论框<code>注册账号</code>，登录后可跳转至自己的评论页。</li></ul><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul><li><a href="https://waline.js.org/guide/get-started/">Waline</a></li><li><a href="https://blog.csdn.net/hubojing/article/details/122659549">博客更换为Waline评论系统</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>waline</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo搭建github博客</title>
    <link href="/2023/hexo%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/hexo%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>1、你必须建一个存储库，这个存储库要和你的github名称一致（不然就会404），如下图：</p><img src="/2023/hexo%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/1.png" class=""><p>2、如果是window配置，需要安装git和<a href="https://nodejs.org/en/download">node.js</a></p><p>3、下载hexo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">npm config <span class="hljs-built_in">set</span> registry https://registry.npm.taobao.org  <span class="hljs-comment">#换源，下载hexo快一点</span><br>npm install hexo-cli -g  <span class="hljs-comment">#进行下载</span><br></code></pre></td></tr></table></figure><p>4、在本地进行hexo部署:hexo init</p><p>5、执行 <code>npm install</code>，如果不行，可以执行这句：<code>npm install - save</code></p><p>6、执行这段代码：<code>npm install hexo-deployer-git --save</code></p><p>7、分别输入  <code>git config --global user.name &quot;你的昵称&quot;</code>  和  <code>git config --global user.email &quot;你的邮箱&quot;</code> 并替换为你的昵称（我的就是DreamOneYou）和邮箱</p><p>8、获取ssh，可以在Git GUI Here进行查看。然后到你的github设置下，找到ssh key设置。</p><img src="/2023/hexo%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/gitgui.png" class=""><p>9、找到你安装博客的文件夹找到_config.yml配置文件并打开（可以用Notepad++也可以用记事本打开）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">deploy:<br>  <span class="hljs-built_in">type</span>: git<br>  repository: 你复制的ssh<br>  branch: master<br></code></pre></td></tr></table></figure><p>10、之后依次执行进行上传：<code>hexo clean</code>; <code>hexo g</code>; <code>hexo d</code>;如果你想本地看一下效果，可以执行：<code>hexo s</code></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>如何利用github搭建博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>视频软件介绍</title>
    <link href="/2023/%E5%90%84%E7%A7%8D%E8%A7%86%E9%A2%91%E7%89%B9%E6%95%88%E6%80%BB%E7%BB%93/"/>
    <url>/2023/%E5%90%84%E7%A7%8D%E8%A7%86%E9%A2%91%E7%89%B9%E6%95%88%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="一些视频软件"><a href="#一些视频软件" class="headerlink" title="一些视频软件"></a>一些视频软件</h2><ul><li>整体最佳、功能最强的视频编辑软件：Adobe Premiere Pro CC</li><li>物美价廉的中文视频编辑软件：蜜蜂剪辑（Beecut）</li><li>最适合Apple Mac的视频编辑软件：Apple Final Cut Pro X</li><li>适合初学者的视频编辑软件：Corel VideoStudio Ultimate</li><li>价格实惠的视频剪辑软件：Adobe Premiere Elements 2020</li><li>适合制作电影效果的视频编辑软件：CyberLink PowerDirector</li><li>编辑速度快的视频编辑软件：Ulead Video Studio</li><li>一款适合Mac的视频剪辑软件：DaVinci Resolve</li><li>最受欢迎的家庭视频剪辑软件：Magix Movie Edit Pro Premium</li><li>免费的苹果系统视频编辑软件：Apple iMovie</li><li>最佳快速视频编辑软件：Movavi Video Editor</li><li>最佳预算视频编辑软件：Wondershare Filmora</li><li>最佳细节调整视频编辑软件：Vegas Pro</li><li>最佳移动客户端视频编辑软件：Adobe Premiere Rush</li><li>最佳小型企业适用视频编辑软件：Vimeo</li><li>录屏+视频编辑软件二合一：Camtasia</li><li>最佳免费视频剪辑软件：Lightworks</li><li>免费好用的视频剪辑软件：OpenShot</li><li>最佳简洁界面视频编辑软件：Shotcut</li><li>最佳性价比专业级视频编辑软件：Blender</li><li>最佳Windows自带视频编辑软件：Windows Video Editor</li><li>最佳在线视频编辑软件：WeVideo</li><li>最佳专业性移动视频编辑软件：KineMaster</li><li>最适合社交媒体使用者的视频编辑软件：Magisto</li><li>最佳画面色彩视频编辑软件：Pinnacle Studio Ultimate</li><li>最佳业余爱好者适用视频编辑软件： HitFilm Pro 和 HitFilm Express</li><li>最佳Windows系统适用视频编辑软件：VideoPad</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>视频软件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>传统图像分割方法（基于阈值分割）</title>
    <link href="/2022/%E4%BC%A0%E7%BB%9F%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E6%96%B9%E6%B3%95%EF%BC%88%E5%9F%BA%E4%BA%8E%E9%98%88%E5%80%BC%E5%88%86%E5%89%B2%EF%BC%89/"/>
    <url>/2022/%E4%BC%A0%E7%BB%9F%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E6%96%B9%E6%B3%95%EF%BC%88%E5%9F%BA%E4%BA%8E%E9%98%88%E5%80%BC%E5%88%86%E5%89%B2%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>阈值法：基本思想是基于图像的<span style="color: #ff0000;">灰度特征</span>来计算一个或多个灰度阈值，并将图像中<span style="color: #ff0000;">每个像素的灰度值与阈值相比较</span>，最后将像素根据比较结果分到合适的类别中。因此，<span style="color: #ff0000;">该类方法最为关键的一步就是按照某个准则函数来求解最佳灰度阈值。</span></p><p>&nbsp;</p><p><img src="/image/1218402-20221031142818940-51960334.png" alt="" /></p><p>&nbsp;一个简单实现：</p><div class="cnblogs_code"><pre><span style="color: #0000ff;">import</span><span style="color: #000000;"> cv2</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> numpy as np</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> matplotlib.pyplot as plt</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> collections as colpath </span>= r<span style="color: #800000;">"</span><span style="color: #800000;">laohu.jpg</span><span style="color: #800000;">"</span><span style="color: #000000;">path1 </span>= r<span style="color: #800000;">"</span><span style="color: #800000;">laohu1.jpg</span><span style="color: #800000;">"</span><span style="color: #000000;">image </span>=<span style="color: #000000;"> cv2.imread(path)temp </span>= np.zeros((image.shape[0], image.shape[1], 1<span style="color: #000000;">))<br /># gray=0.3 * r + 0.59*g + 0.11 * btemp[:,:, 0] </span>= image[:,:, 0] * 0.11 + image[:,:, 1] * 0.59 + image[:,:, 2] * 0.3<span style="color: #008000;">#</span><span style="color: #008000;"> 绘制双峰图</span>y =<span style="color: #000000;"> list()</span><span style="color: #0000ff;">for</span> i <span style="color: #0000ff;">in</span><span style="color: #000000;"> range(image.shape[0]):    </span><span style="color: #0000ff;">for</span> j <span style="color: #0000ff;">in</span> range(image.shape[1<span style="color: #000000;">]):        y.append(int(temp[i, j, 0]))yy </span>=<span style="color: #000000;"> col.Counter(y)yyy </span>=<span style="color: #000000;"> list()xxx </span>=<span style="color: #000000;"> list()</span><span style="color: #0000ff;">for</span> i <span style="color: #0000ff;">in</span><span style="color: #000000;"> sorted(yy):    xxx.append(i)    yyy.append(yy[i])</span><span style="color: #0000ff;">print</span><span style="color: #000000;">(yyy)<p>x </span>&#x3D; [i <span style="color: #0000ff;">for</span> i <span style="color: #0000ff;">in</span> range(256<span style="color: #000000;">)]<br>plt.bar(xxx, yyy, width</span>&#x3D;2, fc&#x3D;<span style="color: #800000;">“</span><span style="color: #800000;">gray</span><span style="color: #800000;">“</span><span style="color: #000000;">)<br>plt.show()<br>plt.savefig(</span><span style="color: #800000;">“</span><span style="color: #800000;">bar.jpg</span><span style="color: #800000;">“</span><span style="color: #000000;">)<br></span><span style="color: #008000;">#</span><span style="color: #008000;"> 找到最低点，设置阈值</span><br>temp &#x3D; np.where(temp &gt; 115<span style="color: #000000;">, temp, 0)<br>cv2.imwrite(path1, temp)</span></pre></p></div><p>&nbsp;</p><p>结果：</p><table border="0"><tbody><tr><td>before</td><td>after</td><td>&nbsp;</td></tr><tr><td><img src="/image/1218402-20221111220313900-1998068712.jpg" alt="" /><p>&nbsp;</p></td><td><img src="/image/1218402-20221111223818410-7371975.jpg" alt="" /><br /><br /><p>&nbsp;</p></td><td><p><img src="/image/1218402-20221111223833390-881251902.png" alt="" width="461" height="234" /></p></td></tr><tr><td><p><img src="/image/1218402-20221111224947534-2116380485.jpg" alt="" /></p><p>&nbsp;</p></td><td>&nbsp;<img src="/image/1218402-20221111224958107-846218826.jpg" alt="" /><p>&nbsp;</p></td><td>&nbsp;<img src="/image/1218402-20221111225008172-1550009781.png" alt="" width="581" height="297" /><p>&nbsp;</p></td></tr></tbody></table><p>&nbsp;</p>]]></content>
    
    
    <categories>
      
      <category>categories10245</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tags10245</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
